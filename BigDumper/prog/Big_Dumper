#!/bin/sh
#Big Dumper

##VARIABLES##
#bon=n
a=1

##COULEURS##
RS="\033[1;31m" #rouge gras
NS="\033[0m" #normal
YS="\033[1;33m" #jaune gras
ys="\033[0;33m" #jaune
VS="\033[1;32m" #vert gras


##FONCTIONS##
fonction_home () {
clear
echo $VS"BIENVENUE DANS LA CONSOLE DE DUMP      VOTRE UID EST: $RS$UID "$NS
echo $VS"                                       IL CORRESPOND AU DUMP: $RS$uidnom "$NS
echo ""
echo $RS"Que souhaitez-vous faire?"$NS
echo ""
echo $YS"1) "$VS"Dumper un carte avec MFOC"$NS
echo $YS"2) "$VS"Dumper un carte avec miLazyCracker (peut être long!)"$NS
echo $YS"3) "$VS"Ecrire sur la carte"$NS
echo $YS"4) "$VS"Transférer automatiquement sur la carte"$NS
echo $YS"5) "$VS"Nfc-list"$NS
echo $YS"6) "$VS"Editer un dump"$NS
echo $YS"7) "$VS"Différences des dumps"$NS
echo $YS"8) "$VS"Supprimer un dumps"$NS
echo $YS"9) "$VS"Voir les UID enregistrés"$NS
echo $YS"10) "$VS"Voir la liste des Dumps"$NS
#echo $YS"11) "$VS""$NS
#echo $YS"12) "$VS""$NS
#echo $YS"13) "$VS""$NS
echo ""
echo $YS"r) "$VS"Recharger l'UID"
echo $YS"s) "$VS"RAZ un badge clone" 
echo $YS"maj) "$VS"Mettre à jour le programme"
echo $YS"00) QUITTER"$NS
}
fonction_erreur () {
until [ $faire = 1 ]||[ $faire = 2 ]||[ $faire = 3 ]||[ $faire = 4 ]||[ $faire = 5 ]||[ $faire = 6 ]||[ $faire = 00 ]||[ $faire = 7 ]||[ $faire = 8 ]||[ $faire = 9 ]||[ $faire = 10 ]||[ $faire = r ]||[ $faire = s ]||[ $faire = maj ] ; do  #Boucle d'erreur
	fonction_home
	echo $RS"Erreur de choix, merci de recommencer."$NS
	read faire
	clear
done
}
fonction_mfoc () {
printf '\033]2;BigDumper - Mfoc\a'
echo $YS"MFOC		TAPEZ 01 POUR RETOURNER AU MENU PRINCIPAL"$ys
echo ""

ls /root/BigDumper/clé
echo $RS"Choisir un fichier de Clé (mettre ""clé"" par défaut) sans extension sinon appuyer sur Entrée:"$NS
echo ""
read cle
if [ "$cle" = 01 ] ; then break ; clear ; echo $RS"Vous avez quitté!"$NS
else 
	clear
	echo $YS"MFOC		TAPEZ 01 POUR RETOURNER AU MENU PRINCIPAL"$NS
	echo ""
	echo $RS"Nom du fichier:"$NS
	echo ""
	read fichier
	if [ "$fichier" = 01 ] ; then break ; clear ; echo $RS"Vous avez quitté!"$NS
	else
		clear
		if [ -z "$cle" ]  #Si la variable cle est vide alors
		then	
			mfoc -P 500 -O /root/BigDumper/dump/$fichier.dmp
			fonction_UID
			cp /root/BigDumper/dump/$fichier.dmp /root/BigDumper/dump/NePasSupprimer/$UID.dmp
		else
			mfoc -P 500 -f /root/BigDumper/clé/$cle.txt -O /root/BigDumper/dump/$fichier.dmp
			fonction_UID
			cp /root/BigDumper/dump/$fichier.dmp /root/BigDumper/dump/NePasSupprimer/$UID.dmp
		fi
		if [ "$UID" != "" ]  #Si la variable UID n'est pas vide alors
		then
			sed -i '1i'$fichier'='$UID'' /root/BigDumper/dump/NePasSupprimer/uid.txt #Ajoute l'UID à la base de données
		fi
	fi	
fi
}
fonction_transfert () {
printf '\033]2;BigDumper - Transfert\a'
echo $YS"TRANSFERT		TAPEZ 01 POUR RETOURNER AU MENU PRINCIPAL"$NS
echo ""

echo $RS"Modifier l'UID? (y/n)"$NS
echo ""
read choix
if [ "$choix" = 01 ] ; then break ; fi
clear

	if [ "$choix" = "y" ]
		then
			echo $YS"TRANSFERT		TAPEZ 01 POUR RETOURNER AU MENU PRINCIPAL"$ys
			echo ""
			ls /root/BigDumper/dump
			echo $RS"Nom du dump à copier (sans extension):"$NS
			echo ""
			read nom
			if [ $nom = 01 ] ; then break ; clear ; echo $RS"Vous avez quitté!"$NS 
			else
				clear
				nfc-mfclassic W A /root/BigDumper/dump/$nom.dmp 
			fi		
	elif [ "$choix" = "n" ]
		then
			echo $YS"TRANSFERT		TAPEZ 01 POUR RETOURNER AU MENU PRINCIPAL"$ys
			echo ""
			ls /root/BigDumper/dump
			echo $RS"Nom du dump à copier(sans extension):"$NS
			echo ""
			read nom
			if [ $nom = 01 ] ; then break ; clear ; echo $RS"Vous avez quitté!"$NS
			else
				echo $RS"Nom de l'ancien dump(sans extension):"$NS
				echo ""
				read ancien
				if [ $ancien = 01 ] ; then break ; clear ; echo $RS"Vous avez quitté!"$NS
				else
					clear
					nfc-mfclassic w B /root/BigDumper/dump/$nom.dmp /root/BigDumper/dump/$ancien.dmp
				fi	
			fi	
	fi
}
fonction_transfertAuto () {
printf '\033]2;BigDumper - Transfert Automatique\a'
echo $YS"TRANSFERT AUTOMATIQUE		TAPEZ 01 POUR RETOURNER AU MENU PRINCIPAL"$NS
echo ""
echo $RS"Placer le tag NFC sur le lecteur puis appuyer sur ENTREE"$NS
read auto
if [ "$auto" = 01 ] ; then break ; clear ; echo $RS"Vous avez quitté!"$NS
else
	cd /root/BigDumper/dump/NePasSupprimer
	fonction_UID
	FICHIER_UID="${UID}.dmp"
	if [ -f $FICHIER_UID ] ; then #Vérifie si le fichier dans la variable existe
		nfc-mfclassic w B /root/BigDumper/dump/NePasSupprimer/$FICHIER_UID /root/BigDumper/dump/NePasSupprimer/$FICHIER_UID
	else
		echo "Aucun fichier ne correspond!"
	fi
fi
}
fonction_milazy () {
printf '\033]2;BigDumper - miLazyCracker\a'
miLazyCracker
}
#fonction_milazy_ancien () {
#
#cd miLazyCracker
#cd crypto1_bs
#clear
#		
#until [ $bon = y ]||[ $bon = yes ]||[ $bon = oui ]||[ $bon = o ]||[ $bon = Y ]||[ $bon = O ] ; do
#		clear
#		echo $YS"	miLazyCracker		TAPEZ 01 POUR RETOURNER AU MENU PRINCIPAL"$NS
#		echo ""
#		
#		echo $RS"Clé connue:"$NS
#		read cle1
#		if [ $cle1 = 01 ] ; then break 2 ; fi
#
#		echo ""
#		echo $RS"Numéro du secteur connu X 4:"$NS
#		read secteur
#		if [ $secteur = 01 ] ; then break 2 ; fi
#
#		echo ""
#		echo $RS"Clé A ou B?"$NS
#		read cle2
#		if [ $cle2 = 01 ] ; then break 2 ; fi
#
#		echo ""
#		echo $RS"Clé cherchée du même secteur (A ou B):"$NS
#		read cle3
#		if [ $cle3 = 01 ] ; then break 2 ; fi
#		
#		echo ""
#		echo $RS"Tout est correcte? (y/n)"$NS
#		read bon
#		if [ $bon = 01 ] ; then break 2 ; fi
#	done
#clear
#
#./libnfc_crypto1_crack $cle1 $secteur $cle2 $secteur $cle3
#./libnfc_crypto1_crack <known key> <NumeroSecteurConnu[x]4(nbr de bloc)> <A|B> <BLOCK RECHERCHE (même que précédant)> <A|B>
#}
fonction_nfc_list () {
nfc-list
}
fonction_hexedit () {
printf '\033]2;BigDumper - Edition Dump\a'
echo $YS"EDITER UN DUMP		TAPEZ 01 POUR RETOURNER AU MENU PRINCIPAL"$ys
echo ""		
	ls /root/BigDumper/dump
	echo $RS"Nom du dump à éditer (sans extension):"$NS
	echo ""
	read hex
	if [ "$hex" = 01 ] ; then clear ; break ; echo $RS"Vous avez quitté!"$NS
	else 
		clear
		hexedit /root/BigDumper/dump/$hex.dmp
		nomuid=$(sed -n '/'$hex'/s/.*=//p' /root/BigDumper/dump/NePasSupprimer/uid.txt) #extrait l'UID grace au nom
		cp /root/BigDumper/dump/$hex.dmp /root/BigDumper/dump/NePasSupprimer/$nomuid.dmp
	fi
}
fonction_diff () {
printf '\033]2;BigDumper - Comparateur de Dump\a'
dump1="" ; dump2=""
until [ -f $dump1.dmp ]&&[ -f $dump2.dmp ]||[ "$dump1" = "01"]||[ "$dump2" = "01" ] ; do
clear
echo $YS"DIFF	TAPEZ 01 POUR RETOURNER AU MENU PRINCIPAL"$ys
echo ""
cd /root/BigDumper/dump
ls
echo $RS"Choisir le premier fichier à comparer sans extension:"$NS
echo ""
read dump1
if [ "$dump1" = "01" ] ; then clear ; break ; echo $RS"Vous avez quitté!"$NS
else
	echo ""
	echo $RS"Choisir le deuxième fichier à comparer sans extension:"$NS
	echo ""
	read dump2	
	if [ "$dump2" = "01" ] ; then clear ; break ; echo $RS"Vous avez quitté!"$NS ; fi
fi
done
if [ "$dump1" = "01" ]||[ "$dump2" = "01" ] ; then clear ; break ;echo $RS"Vous avez quitté!"$NS 
else
	dif=$(diff $dump1.dmp $dump2.dmp)
	if [ -z "$dif" ]  #Si la variable dif est vide alors
	then
		clear
		echo "Les fichiers sont identiques!"
	else
		clear
		echo "Les fichiers $VS$dump1.dmp$NS et $VS$dump2.dmp$NS sont différents!"
	fi	
fi		
}
fonction_supp () {
printf '\033]2;BigDumper - Suppression de Dump\a'
supp="" ; rep=""
until [ $rep = oui ]||[ $rep = non ]||[ $rep = 01 ]||[ $supp = 01 ] ; do
	clear
	echo $YS"SUPPRIMER UN DUMP	TAPEZ 01 POUR RETOURNER AU MENU PRINCIPAL"$ys
	echo "" 
	ls /root/BigDumper/dump
	echo $RS"Choisir le dump à supprimer (sans extension) ou faites 01 pour quitter:"$NS
	echo ""
	read supp
	if [ $supp = 01 ] ; then break ; fi
	clear
	echo $YS"SUPPRIMER UN DUMP	TAPEZ 01 POUR RETOURNER AU MENU PRINCIPAL"$ys
	echo ""
	ls /root/BigDumper/dump
	echo $RS"Etes-vous sûr de vouloir supprimer le dump "$VS"$supp "$RS"? oui/non:"$NS
	read rep
done
clear
if [ "$rep" = oui ] ; then
	nomuid=$(sed -n '/'$supp'/s/.*=//p' /root/BigDumper/dump/NePasSupprimer/uid.txt) #extrait l'UID grace au nom
	rm /root/BigDumper/dump/NePasSupprimer/"$nomuid".dmp
	rm "$supp".dmp
	sed  -i "/${supp}=/d" /root/BigDumper/dump/NePasSupprimer/uid.txt #supprime l'uid de la base de données
	clear
	echo $VS"$supp "$YS"a bien été supprimé "
elif [ "$rep" = non ] ; then
	break
elif [ "$rep" = 01 ] ; then break ; echo $RS"Vous avez quitté!"$NS
elif [ "$supp" = 01 ] ; then break ; echo $RS"Vous avez quitté!"$NS ; fi
}
fonction_liste_dump () {
printf '\033]2;BigDumper - Liste des Dump\a'
ls /root/BigDumper/dump
}
fonction_raz_clone () {
printf '\033]2;BigDumper - Réinitialiser un badge\a'
raz=""
until [ "$raz" = "oui" ] || [ "$raz" = "non" ] || [ "$raz" = "01" ] ; do
clear
echo $YS"REMISE A ZERO D'UN BADGE CLONE		TAPEZ 01 POUR RETOURNER AU MENU PRINCIPAL"$NS
echo ""
echo $RS"ATTENTION, vous êtes sur le point de supprimer les données de votre badge clone!"
echo "Etes-vous sûr? (oui/non)"$NS
read raz
if [ "$raz" = "oui" ]
then
	clear
	nfc-mfclassic W A /root/BigDumper/dump/reload.dmp
	echo $YS"Les données ont été supprimées."	
elif [ "$raz" = "01" ] ; then clear ; break
fi
done
}
fonction_UID () {
UID=$(nfc-list -t 1|sed -n 's/ //g;/UID/s/.*://p') #Récupère l'UID
}
fonction_uidnom () {
uidnom=$(sed -n '/'$UID'/s/=.*//p' /root/BigDumper/dump/NePasSupprimer/uid.txt) #extrait le nom grace à l'UID
if [ -z "$uidnom" ]
then
	uidnom="AUNCUNE CORRESPONDANCE"
fi
}
fonction_nomuid () {
nomuid=$(sed -n "/'$NOM'/s/.*=//p" /root/BigDumper/dump/NePasSupprimer/uid.txt) #extrait l'UID grace au nom
}
fonction_fichier_uid () {
printf '\033]2;BigDumper - Liste des UID enregistrés\a'
cat /root/BigDumper/dump/NePasSupprimer/uid.txt
echo $YS"Tapez \"m\" pour modifier le fichier sinon appuyez sur Entrée"$NS
read m
if [ "$m" = "m" ] 
then 
	nano /root/BigDumper/dump/NePasSupprimer/uid.txt
fi
clear
}
fonction_MiseAJour () {
echo $VS"MISE A JOUR EN COURS MERCI DE PATIENTER..."$NS
git clone https://github.com/maxbrd/BigDumper /root/majbigdumper
cp /root/majbigdumper/BigDumper/prog/Big_Dumper /root/BigDumper/prog
rm -r /root/majbigdumper
chmod +x /root/BigDumper/prog/Big_Dumper
clear
echo $YS"MISE A JOUR TERMINEE!"$NS
sleep 1
dump
exit
}

##CODE##

#until [ "$UID" = "01234567" ] ; do
clear
printf '\033]2;BigDumper\a'
echo "PLACEZ VOTRE BADGE CHARGEMENT DE VOTRE UID EN COURS..." 
fonction_UID
fonction_uidnom
fonction_nomuid
clear
#if [ "$UID" != "01234567" ] &&  [ "$UID" != "" ] ; then
#	echo $RS"ACCES REFUSE!"$NS ; sleep 1
#elif [ "$UID" = "01234567" ] ; then
#	echo $VS"ACCES VALIDE, BIENVENUE"$NS ; sleep 1
#fi
#done

until [ $a != 1 ]&&[ $faire = 00 ] ; do
until [ $a != 1 ]&&[ $faire = 01 ] ; do
printf '\033]2;BigDumper\a'
fonction_home
echo ""
read faire
clear
fonction_erreur	
		
if [ $faire = 1 ]
	then
		fonction_mfoc
		
elif [ $faire = 2 ]
	then
		fonction_milazy	
	 	
elif [ $faire = 3 ]
	then
		fonction_transfert

elif [ $faire = 4 ]
	then
		fonction_transfertAuto

elif [ $faire = 5 ]
	then
		fonction_nfc_list
		
elif [ $faire = 6 ]
	then
		fonction_hexedit
		
elif [ $faire = 7 ]
	then
		fonction_diff		

elif [ $faire = 8 ]
	then
		fonction_supp

elif [ $faire = 9 ]
	then
		fonction_fichier_uid
		
elif [ $faire = 10 ]
	then
		fonction_liste_dump

#elif [ $faire = 11 ]
#	then
#		fonction_		
		
#elif [ $faire = 12 ]
#	then
#		fonction_

#elif [ $faire = 13 ]
#	then
#		fonction_
		
elif [ $faire = r ]
	then
		echo "CHARGEMENT DE VOTRE UID EN COURS..."
		fonction_UID
		fonction_uidnom
		fonction_nomuid
		
		clear		
		break 1
		
elif [ $faire = "s" ]
	then
		fonction_raz_clone
		
elif [ $faire = "maj" ]
	then		
		fonction_MiseAJour
		
elif [ $faire = 00 ]
	then
		exit
fi

echo ""
echo $YS"TERMINE"$NS
echo $YS"Press Enter pour quitter"$NS
read "pause"
clear

done
done
